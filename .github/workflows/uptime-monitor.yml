name: Uptime Monitoring

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  uptime-check:
    name: Uptime Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment:
          - name: production
            url: https://desenyon-infinite-idea.vercel.app
          - name: staging
            url: https://staging-desenyon-infinite-idea.vercel.app

    steps:
      - name: Check ${{ matrix.environment.name }} health
        id: health-check
        run: |
          echo "Checking ${{ matrix.environment.name }} at ${{ matrix.environment.url }}"
          
          # Health check with timeout
          response=$(curl -s -w "%{http_code}:%{time_total}" --max-time 30 "${{ matrix.environment.url }}/health" || echo "000:30.000")
          
          http_code=$(echo $response | cut -d: -f1)
          response_time=$(echo $response | cut -d: -f2)
          
          echo "HTTP Code: $http_code"
          echo "Response Time: ${response_time}s"
          
          # Set outputs
          echo "http_code=$http_code" >> $GITHUB_OUTPUT
          echo "response_time=$response_time" >> $GITHUB_OUTPUT
          echo "status=$([ "$http_code" = "200" ] && echo "up" || echo "down")" >> $GITHUB_OUTPUT

      - name: Check critical endpoints
        id: endpoint-check
        run: |
          base_url="${{ matrix.environment.url }}"
          endpoints=("/api/projects" "/api/auth/session")
          failed_endpoints=""
          total_endpoints=${#endpoints[@]}
          failed_count=0
          
          for endpoint in "${endpoints[@]}"; do
            echo "Checking $base_url$endpoint"
            http_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 15 "$base_url$endpoint" || echo "000")
            
            if [ "$http_code" -ge 500 ]; then
              failed_endpoints="$failed_endpoints$endpoint($http_code) "
              failed_count=$((failed_count + 1))
            fi
          done
          
          echo "failed_endpoints=$failed_endpoints" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "total_endpoints=$total_endpoints" >> $GITHUB_OUTPUT

      - name: Performance check
        id: performance-check
        run: |
          base_url="${{ matrix.environment.url }}"
          
          # Measure page load time
          load_time=$(curl -s -w "%{time_total}" -o /dev/null --max-time 30 "$base_url" || echo "30.000")
          load_time_ms=$(echo "$load_time * 1000" | bc -l | cut -d. -f1)
          
          echo "Page load time: ${load_time_ms}ms"
          echo "load_time_ms=$load_time_ms" >> $GITHUB_OUTPUT
          echo "performance_status=$([ "$load_time_ms" -lt 5000 ] && echo "good" || echo "slow")" >> $GITHUB_OUTPUT

      - name: Update status badge
        if: matrix.environment.name == 'production'
        run: |
          status="${{ steps.health-check.outputs.status }}"
          color=$([ "$status" = "up" ] && echo "brightgreen" || echo "red")
          
          # This would typically update a status badge service
          echo "Status: $status (color: $color)"

      - name: Send alert if down
        if: steps.health-check.outputs.status == 'down' || steps.endpoint-check.outputs.failed_count > 0
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          text: |
            🚨 UPTIME ALERT - ${{ matrix.environment.name }}
            
            🌐 Environment: ${{ matrix.environment.name }}
            📍 URL: ${{ matrix.environment.url }}
            ⏰ Time: ${{ github.event.head_commit.timestamp }}
            
            📊 Status Details:
            • Health Check: ${{ steps.health-check.outputs.status == 'up' && '✅ UP' || '❌ DOWN' }}
            • HTTP Code: ${{ steps.health-check.outputs.http_code }}
            • Response Time: ${{ steps.health-check.outputs.response_time }}s
            • Failed Endpoints: ${{ steps.endpoint-check.outputs.failed_count }}/${{ steps.endpoint-check.outputs.total_endpoints }}
            
            ${{ steps.endpoint-check.outputs.failed_endpoints != '' && format('🔴 Failed Endpoints: {0}', steps.endpoint-check.outputs.failed_endpoints) || '' }}
            
            🔧 Action Required: Investigate immediately
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send performance warning
        if: steps.performance-check.outputs.performance_status == 'slow' && steps.health-check.outputs.status == 'up'
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#monitoring'
          text: |
            ⚠️ PERFORMANCE WARNING - ${{ matrix.environment.name }}
            
            🌐 Environment: ${{ matrix.environment.name }}
            📍 URL: ${{ matrix.environment.url }}
            ⏱️ Page Load Time: ${{ steps.performance-check.outputs.load_time_ms }}ms
            
            📈 Performance is slower than expected (>5s)
            💡 Consider investigating server performance
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Log monitoring results
        run: |
          echo "=== Uptime Monitoring Results ==="
          echo "Environment: ${{ matrix.environment.name }}"
          echo "URL: ${{ matrix.environment.url }}"
          echo "Status: ${{ steps.health-check.outputs.status }}"
          echo "HTTP Code: ${{ steps.health-check.outputs.http_code }}"
          echo "Response Time: ${{ steps.health-check.outputs.response_time }}s"
          echo "Page Load Time: ${{ steps.performance-check.outputs.load_time_ms }}ms"
          echo "Failed Endpoints: ${{ steps.endpoint-check.outputs.failed_count }}/${{ steps.endpoint-check.outputs.total_endpoints }}"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

  summary:
    name: Monitoring Summary
    runs-on: ubuntu-latest
    needs: uptime-check
    if: always()
    
    steps:
      - name: Create monitoring summary
        run: |
          echo "📊 Uptime Monitoring Summary"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "Environments checked: production, staging"
          echo "Check frequency: Every 5 minutes"
          echo "Next check: $(date -u -d '+5 minutes' +"%Y-%m-%dT%H:%M:%SZ")"